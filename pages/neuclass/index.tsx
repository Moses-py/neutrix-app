import Head from "next/head";
import dynamic from "next/dynamic";
import mongoConnect from "@/lib/mongo_connect";
import { authenticateUser } from "@/utils/auth/authenticateUser";
import { NextApiRequest, NextApiResponse } from "next";
import { getToken } from "next-auth/jwt";
import { useContext } from "react";
import { MainContext } from "@/context/Main";
import { useEffectOnce } from "usehooks-ts";

const Dashboard = dynamic(
  () => import("@/features/neuclasspage/Dashboard/Dashboard")
);

const Neuclass = ({ user_data }) => {
  const { updateNote, updateUser, updateBookmark } = useContext(MainContext);

  useEffectOnce(() => {
    updateUser(user_data.email);
    updateNote(user_data.notes);
    updateBookmark(user_data.bookmarks);
  });

  return (
    <>
      <Head>
        <title>Neutrix | Neuclass</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <script
          type="text/javascript"
          src="https://assets.calendly.com/assets/external/widget.js"
          async
        ></script>
      </Head>

      <Dashboard data={user_data} />
    </>
  );
};

export async function getServerSideProps(ctx: {
  req: NextApiRequest;
  res: NextApiResponse;
}) {
  const session = await authenticateUser(ctx);

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }
  const token = await getToken({
    req: ctx.req,
    secret: process.env.NEXTAUTH_SECRET,
  });

  const { db, client } = await mongoConnect();
  if (!db) throw new Error("Invalid connection");

  const found_user = await db
    .collection("users")
    .findOne({ email: token.email });

  if (!found_user) throw new Error("Request resource not found");

  const {
    email,
    first_name,
    last_name,
    phonenumber,
    _id,
    courses,
    notes,
    bookmarks,
  } = found_user;

  const updated_resource = {
    email,
    first_name,
    last_name,
    phonenumber,
    courses,
    id: _id.toString(),
    notes,
    bookmarks,
  };

  client.close();

  return {
    props: {
      user_data: updated_resource,
    },
  };
}
export default Neuclass;
