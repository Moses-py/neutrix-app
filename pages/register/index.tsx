import AlertFeedback from "@/components/alerts/Success";
import { AlertType, UserData } from "@/types/types";
import axios, { AxiosError } from "axios";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { ChangeEvent, FormEvent, useState } from "react";
import { BeatLoader } from "react-spinners";
import Image from "next/image";

const Register = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [alert, setAlert] = useState<AlertType>({
    open: false,
    condition: undefined,
    message: "",
  });
  const [password_match, setPassword_match] = useState("clear");
  const [user_data, set_user_data] = useState<UserData>({
    email: "",
    password: "",
    confirm_password: "",
    first_name: "",
    last_name: "",
    phonenumber: "",
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const [buttonStatus, setButtonStatus] = useState("Please wait...");

  // router object
  const router = useRouter();

  // handle input onchange events to store input values in state
  function handleInputChange(e: ChangeEvent<HTMLInputElement>) {
    const field_name = e.target.name;
    field_name === "first_name" &&
      set_user_data((prev) => {
        return { ...prev, first_name: e.target.value };
      });
    field_name === "last_name" &&
      set_user_data((prev) => {
        return { ...prev, last_name: e.target.value };
      });
    field_name === "email" &&
      set_user_data((prev) => {
        return { ...prev, email: e.target.value };
      });
    field_name === "password" &&
      set_user_data((prev) => {
        return { ...prev, password: e.target.value };
      });
    field_name === "confirm_password" &&
      set_user_data((prev) => {
        return { ...prev, confirm_password: e.target.value };
      });
    field_name === "phonenumber" &&
      set_user_data((prev) => {
        return { ...prev, phonenumber: e.target.value };
      });
  }

  // utility function to compare passwords
  function passwordChecker() {
    if (
      user_data.password.length < 1 &&
      user_data.confirm_password.length < 1
    ) {
      setPassword_match("clear");
    } else {
      if (user_data.confirm_password != user_data.password) {
        setPassword_match("no_match");
      } else {
        setPassword_match("match");
      }
    }
  }

  // submit handler function
  async function register_user(e: FormEvent) {
    e.preventDefault();
    setIsLoading(true);
    setButtonStatus("Signing you up...");
    const { first_name, last_name, email, password, phonenumber } = user_data;
    const exclude_c_pass = {
      first_name,
      last_name,
      email,
      password,
      phonenumber,
      courses: [],
      notes: [],
      bookmarks: [],
    };

    const response = await axios({
      method: "POST",
      url: "/api/auth/register",
      data: exclude_c_pass,
      headers: {
        "Content-type": "application/json",
      },
    })
      .then((res) => {
        setIsLoading(false);
        set_user_data({
          email: "",
          password: "",
          first_name: "",
          last_name: "",
          confirm_password: "",
          phonenumber: "",
        });
        setPassword_match("clear");
        if (res.data.statusCode === 30) {
          setAlert({
            open: true,
            condition: "warning",
            message: "A user with similar email or phonenumber already exists",
          });
        }
        if (res.data.statusCode === 20) {
          setAlert({
            open: true,
            condition: "success",
            message: res.data.message,
          });
        }
        return res;
      })
      .catch((error) => {
        setIsLoading(false);
        if (error instanceof AxiosError) {
          router.push("/error-500");
        }
        return error.response.data;
      });

    if (response.data.statusCode === 20) {
      setButtonStatus("Redirecting...");
      router.push(
        `/verify/verificationStatus/${response.data.user.insertedId}`
      );
    }
  }

  return (
    <>
      <Head>
        <title>Neutrix | Sign up</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div className="px-4">
        <div className="rounded-lg md:w-1/2 mx-auto bg-white rounded-t-lg py-8">
          <div className="relative w-full bg-gray-100 rounded-b-lg pb-12 pt-6 px-4 ">
            <Link
              href="/"
              className="absolute right-4 top-4 text-[12px] font-bold underline text-gray-500"
            >
              Go Home
            </Link>
            <div className="w-full px-4 py-8 relative">
              {alert.open === true && (
                <AlertFeedback
                  open={true}
                  setOpen={() =>
                    setAlert({ open: false, condition: undefined, message: "" })
                  }
                  message={alert.message}
                  status={alert.condition}
                />
              )}

              <div className="mt-4 flex items-center justify-between my-4">
                <p className="border-b w-1/5 lg:w-1/4"></p>
                <p className="text-xs text-center text-gray-400 uppercase">
                  Create an account
                </p>
                <p className="border-b w-1/5 lg:w-1/4"></p>
              </div>
              {/* Form */}
              <form onSubmit={register_user}>
                <div className="block lg:flex gap-2">
                  {/* First name */}
                  <div className="mt-4 w-full">
                    <input
                      required
                      className="appearance-none placeholder:text-gray-400 border pl-4 border-gray-100 shadow-sm focus:shadow-md focus:placeholder-gray-600  transition  rounded-md w-full py-3 text-gray-600  leading-tight"
                      type="text"
                      value={user_data.first_name}
                      name="first_name"
                      onChange={handleInputChange}
                      placeholder="First name"
                    />
                  </div>

                  {/* Last Name */}

                  <div className="mt-4 w-full">
                    <input
                      required
                      className="appearance-none placeholder:text-gray-400 border pl-4 border-gray-100 shadow-sm focus:shadow-md focus:placeholder-gray-600  transition  rounded-md w-full py-3 text-gray-600  leading-tight"
                      type="text"
                      value={user_data.last_name}
                      name="last_name"
                      onChange={handleInputChange}
                      placeholder="Last name"
                    />
                  </div>
                </div>

                {/* Email and phone number*/}
                <div className="block lg:flex gap-2">
                  <div className="mt-4 w-full">
                    <input
                      required
                      className="appearance-none placeholder:text-gray-400 border pl-4 border-gray-100 shadow-sm focus:shadow-md focus:placeholder-gray-600  transition  rounded-md w-full py-3 text-gray-600  leading-tight"
                      type="email"
                      value={user_data.email}
                      name="email"
                      onChange={handleInputChange}
                      placeholder="Email"
                    />
                  </div>

                  <div className="mt-4 w-full">
                    <input
                      required
                      className="appearance-none placeholder:text-gray-400 border pl-4 border-gray-100 shadow-sm focus:shadow-md focus:placeholder-gray-600  transition  rounded-md w-full py-3 text-gray-600  leading-tight"
                      type="number"
                      placeholder="Phone number"
                      value={user_data.phonenumber}
                      name="phonenumber"
                      onChange={handleInputChange}
                    />
                  </div>
                </div>

                {/* Password */}
                <div className="block lg:flex gap-2">
                  <div className="full-box relative w-full ">
                    <div className="mt-4 relative">
                      <div className="box">
                        <div className="absolute inset-y-0 right-4 flex items-center pl-3">
                          {showPassword ? (
                            <Image
                              src="/icons/hide_eye.png"
                              height={20}
                              width={20}
                              alt="lock"
                              onClick={() => setShowPassword(!showPassword)}
                              className=" cursor-pointer"
                            />
                          ) : (
                            <Image
                              src="/icons/eye.png"
                              height={20}
                              width={20}
                              alt="lock"
                              onClick={() => setShowPassword(!showPassword)}
                              className=" cursor-pointer"
                            />
                          )}
                        </div>
                        <input
                          required
                          className={`appearance-none placeholder:text-gray-400 border pl-4 border-gray-100 shadow-sm focus:shadow-md focus:placeholder-gray-600  transition  rounded-md w-full py-3 text-gray-600  leading-tight ${
                            password_match === "no_match" && "border-red"
                          } ${password_match === "match" && "border-green"}`}
                          type={!showPassword ? "password" : "text"}
                          value={user_data.password}
                          name="password"
                          onChange={handleInputChange}
                          onKeyUp={passwordChecker}
                          placeholder="Password"
                        />
                      </div>
                    </div>
                    {/* Password feedback */}
                    {user_data.password && user_data.password.length < 10 && (
                      <p className="text-red text-[11px] my-1">
                        More than 10 characters required
                      </p>
                    )}
                    {user_data.password && user_data.password.length >= 10 && (
                      <p className="text-green text-[11px] my-1">
                        Password length satisfied
                      </p>
                    )}
                  </div>

                  <div className="full-box relative w-full ">
                    <div className="mt-4 relative">
                      <div className="box">
                        <div className="absolute inset-y-0 right-4 flex items-center pl-3">
                          {showConfirmPassword ? (
                            <Image
                              src="/icons/hide_eye.png"
                              height={20}
                              width={20}
                              alt="lock"
                              onClick={() =>
                                setShowConfirmPassword(!showConfirmPassword)
                              }
                              className=" cursor-pointer"
                            />
                          ) : (
                            <Image
                              src="/icons/eye.png"
                              height={20}
                              width={20}
                              alt="lock"
                              onClick={() =>
                                setShowConfirmPassword(!showConfirmPassword)
                              }
                              className=" cursor-pointer"
                            />
                          )}
                        </div>
                        <input
                          required
                          disabled={user_data.password === ""}
                          className={`appearance-none placeholder:text-gray-400 border pl-4 border-gray-100 shadow-sm focus:shadow-md focus:placeholder-gray-600  transition  rounded-md w-full py-3 text-gray-600  leading-tight ${
                            user_data.password === "" && "cursor-not-allowed"
                          } ${password_match === "no_match" && "border-red"} ${
                            password_match === "match" && "border-green"
                          }`}
                          value={user_data.confirm_password}
                          type={!showConfirmPassword ? "password" : "text"}
                          name="confirm_password"
                          onChange={handleInputChange}
                          onKeyUp={passwordChecker}
                          placeholder="Confirm password"
                        />
                      </div>
                    </div>
                    {password_match === "no_match" && (
                      <p className="text-red text-[11px] my-1">
                        Please confirm your password
                      </p>
                    )}
                    {password_match === "match" && (
                      <p className="text-green text-[11px] my-1">
                        Password confirmation successful
                      </p>
                    )}
                  </div>
                  {/* Confirm password */}
                </div>

                {/* Submit button */}
                <div className="mt-8">
                  <button
                    type="submit"
                    disabled={isLoading || password_match === "no_match"}
                    className={`bg-gray-700 text-white py-2 px-4 w-full rounded ${
                      isLoading ||
                      (password_match === "no_match" && "cursor-not-allowed")
                    } ${password_match === "match" && "cursor-pointer"}`}
                  >
                    {isLoading ? (
                      <div className="flex items-center justify-center gap-2">
                        <BeatLoader size={10} color="#fff" />
                        <span className="text-[15px] font-secondary">
                          {buttonStatus && buttonStatus}
                        </span>
                      </div>
                    ) : (
                      <span>Submit</span>
                    )}
                  </button>
                </div>
              </form>

              {/* lOGIN REDIRECT */}

              <div className="mt-4 flex items-center justify-between">
                <p className="border-b w-1/5 md:w-1/4"></p>
                <Link href="/login" className="text-xs text-gray-500 underline">
                  Log in to your account
                </Link>
                <p className="border-b w-1/5 md:w-1/4"></p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Register;
