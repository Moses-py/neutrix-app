import AlertFeedback from "@/components/alerts/Success";
import { AlertType, UserData } from "@/types/types";
import axios, { AxiosError } from "axios";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { ChangeEvent, FormEvent, useState } from "react";
import { BeatLoader } from "react-spinners";
import Image from "next/image";

const Register = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [alert, setAlert] = useState<AlertType>({
    open: false,
    condition: undefined,
    message: "",
  });
  const [password_match, setPassword_match] = useState("clear");
  const [user_data, set_user_data] = useState<UserData>({
    email: "",
    password: "",
    confirm_password: "",
    first_name: "",
    last_name: "",
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const [buttonStatus, setButtonStatus] = useState("Please wait...");

  // router object
  const router = useRouter();

  // handle input onchange events to store input values in state
  function handleInputChange(e: ChangeEvent<HTMLInputElement>) {
    const field_name = e.target.name;
    field_name === "first_name" &&
      set_user_data((prev) => {
        return { ...prev, first_name: e.target.value };
      });
    field_name === "last_name" &&
      set_user_data((prev) => {
        return { ...prev, last_name: e.target.value };
      });
    field_name === "email" &&
      set_user_data((prev) => {
        return { ...prev, email: e.target.value };
      });
    field_name === "password" &&
      set_user_data((prev) => {
        return { ...prev, password: e.target.value };
      });
    field_name === "confirm_password" &&
      set_user_data((prev) => {
        return { ...prev, confirm_password: e.target.value };
      });
  }

  // utility function to compare passwords
  function passwordChecker() {
    if (
      user_data.password.length < 1 &&
      user_data.confirm_password.length < 1
    ) {
      setPassword_match("clear");
    } else {
      if (user_data.confirm_password != user_data.password) {
        setPassword_match("no_match");
      } else {
        setPassword_match("match");
      }
    }
  }

  // submit handler function
  async function register_user(e: FormEvent) {
    e.preventDefault();
    setIsLoading(true);
    setButtonStatus("Signing you up...");
    const { first_name, last_name, email, password } = user_data;
    const exclude_c_pass = { first_name, last_name, email, password };

    const response = await axios({
      method: "POST",
      url: "/api/auth/register",
      data: exclude_c_pass,
      headers: {
        "Content-type": "application/json",
      },
    })
      .then((res) => {
        setIsLoading(false);
        set_user_data({
          email: "",
          password: "",
          first_name: "",
          last_name: "",
          confirm_password: "",
        });
        setPassword_match("clear");
        if (res.data.statusCode === 30) {
          setAlert({
            open: true,
            condition: "warning",
            message: "Ooops! Seems a user with this email already exists",
          });
        }
        if (res.data.statusCode === 20) {
          setAlert({
            open: true,
            condition: "success",
            message: res.data.message,
          });
        }
        return res;
      })
      .catch((error) => {
        setIsLoading(false);
        if (error instanceof AxiosError) {
          router.push("/error-500");
        }
        return error.response.data;
      });

    if (response.data.statusCode === 20) {
      setButtonStatus("Redirecting...");
      router.push(
        `/verify/verificationStatus/${response.data.user.insertedId}`
      );
    }
  }

  return (
    <>
      <Head>
        <title>Neutrix | Sign up</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div className="lg:translate-y-[10%]">
        <div className="flex bg-white rounded-lg shadow-lg overflow-hidden mx-auto max-w-sm lg:max-w-4xl">
          <div
            className="hidden lg:block lg:w-1/2 bg-cover"
            style={{
              backgroundImage: `url('https://images.unsplash.com/photo-1527769929977-c341ee9f2033?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8bG9naW58ZW58MHwxfDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60')`,
            }}
          ></div>
          <div className="w-full p-8 lg:w-1/2 relative">
            {alert.open === true && (
              <AlertFeedback
                open={true}
                setOpen={() =>
                  setAlert({ open: false, condition: undefined, message: "" })
                }
                message={alert.message}
                status={alert.condition}
              />
            )}

            <Link
              href="/"
              className="absolute right-2 top-2 text-[11px] my-1 font-bold underline text-gray-500"
            >
              Go Home
            </Link>
            <h2 className="text-xl font-semibold text-gray-700 text-center">
              Neutrix
            </h2>
            <p className="text-sm text-gray-600 text-center">
              Create an account
            </p>
            <a
              href="#"
              className="flex items-center justify-center mt-4 text-white rounded-lg shadow-md hover:bg-gray-100"
            >
              <div className="px-4 py-3">
                <svg className="h-6 w-6" viewBox="0 0 40 40">
                  <path
                    d="M36.3425 16.7358H35V16.6667H20V23.3333H29.4192C28.045 27.2142 24.3525 30 20 30C14.4775 30 10 25.5225 10 20C10 14.4775 14.4775 9.99999 20 9.99999C22.5492 9.99999 24.8683 10.9617 26.6342 12.5325L31.3483 7.81833C28.3717 5.04416 24.39 3.33333 20 3.33333C10.7958 3.33333 3.33335 10.7958 3.33335 20C3.33335 29.2042 10.7958 36.6667 20 36.6667C29.2042 36.6667 36.6667 29.2042 36.6667 20C36.6667 18.8825 36.5517 17.7917 36.3425 16.7358Z"
                    fill="#FFC107"
                  />
                  <path
                    d="M5.25497 12.2425L10.7308 16.2583C12.2125 12.59 15.8008 9.99999 20 9.99999C22.5491 9.99999 24.8683 10.9617 26.6341 12.5325L31.3483 7.81833C28.3716 5.04416 24.39 3.33333 20 3.33333C13.5983 3.33333 8.04663 6.94749 5.25497 12.2425Z"
                    fill="#FF3D00"
                  />
                  <path
                    d="M20 36.6667C24.305 36.6667 28.2167 35.0192 31.1742 32.34L26.0159 27.975C24.3425 29.2425 22.2625 30 20 30C15.665 30 11.9842 27.2359 10.5975 23.3784L5.16254 27.5659C7.92087 32.9634 13.5225 36.6667 20 36.6667Z"
                    fill="#4CAF50"
                  />
                  <path
                    d="M36.3425 16.7358H35V16.6667H20V23.3333H29.4192C28.7592 25.1975 27.56 26.805 26.0133 27.9758C26.0142 27.975 26.015 27.975 26.0158 27.9742L31.1742 32.3392C30.8092 32.6708 36.6667 28.3333 36.6667 20C36.6667 18.8825 36.5517 17.7917 36.3425 16.7358Z"
                    fill="#1976D2"
                  />
                </svg>
              </div>
              <h1 className="px-4 py-3 w-5/6 text-center text-gray-600 font-bold">
                Sign up with Google
              </h1>
            </a>

            <div className="mt-4 flex items-center justify-between">
              <p className="border-b w-1/5 lg:w-1/4"></p>
              <p className="text-xs text-center text-gray-500 uppercase">
                or signup with email
              </p>
              <p className="border-b w-1/5 lg:w-1/4"></p>
            </div>
            {/* Form */}
            <form action="" method="post" onSubmit={register_user}>
              <div className="block lg:flex justify-between gap-2">
                {/* First name */}
                <div className="mt-4">
                  <label className="block text-gray-700 text-xs mb-2">
                    First Name
                  </label>
                  <input
                    required
                    className="bg-gray-200 text-gray-700 focus:outline-none focus:shadow-outline border border-gray-300 rounded py-2 px-4 block w-full appearance-none"
                    type="text"
                    value={user_data.first_name}
                    name="first_name"
                    onChange={handleInputChange}
                  />
                </div>

                {/* Last Name */}

                <div className="mt-4">
                  <label className="block text-gray-700 text-xs mb-2">
                    Last Name
                  </label>
                  <input
                    required
                    className="bg-gray-200 text-gray-700 focus:outline-none focus:shadow-outline border border-gray-300 rounded py-2 px-4 block w-full appearance-none"
                    type="text"
                    value={user_data.last_name}
                    name="last_name"
                    onChange={handleInputChange}
                  />
                </div>
              </div>

              {/* Email */}
              <div className="mt-4">
                <label className="block text-gray-700 text-xs mb-2">
                  Email Address
                </label>
                <input
                  required
                  className="bg-gray-200 text-gray-700 focus:outline-none focus:shadow-outline border border-gray-300 rounded py-2 px-4 block w-full appearance-none"
                  type="email"
                  value={user_data.email}
                  name="email"
                  onChange={handleInputChange}
                />
              </div>

              {/* Password */}
              <div className="mt-4 w-full relative">
                <div className="flex justify-between">
                  <label className="block text-gray-700 text-xs mb-2">
                    Password
                  </label>
                </div>
                <div className="absolute inset-y-0 top-[32px] right-2 flex items-center pl-3">
                  {showPassword ? (
                    <Image
                      src="/icons/hide_eye.png"
                      height={20}
                      width={20}
                      alt="lock"
                      onClick={() => setShowPassword(!showPassword)}
                      className=" cursor-pointer"
                    />
                  ) : (
                    <Image
                      src="/icons/eye.png"
                      height={20}
                      width={20}
                      alt="lock"
                      onClick={() => setShowPassword(!showPassword)}
                      className=" cursor-pointer"
                    />
                  )}
                </div>
                <input
                  required
                  className={`bg-gray-200 text-gray-700 focus:border-transparent focus:ring-0 border border-gray-300 rounded py-2 px-4 block w-full appearance-none ${
                    password_match === "no_match" && "border-red"
                  } ${password_match === "match" && "border-green"}`}
                  type={!showPassword ? "password" : "text"}
                  value={user_data.password}
                  name="password"
                  onChange={handleInputChange}
                  onKeyUp={passwordChecker}
                />
              </div>
              {/* Password feedback */}
              {user_data.password && user_data.password.length < 10 && (
                <p className="text-red text-[11px] my-1">
                  More than 10 characters required
                </p>
              )}
              {user_data.password && user_data.password.length >= 10 && (
                <p className="text-green text-[11px] my-1">
                  Password length satisfied
                </p>
              )}
              {/* Confirm password */}
              <div className="mt-4 relative w-full">
                <div className="flex justify-between">
                  <label className="block text-gray-700 text-xs mb-2">
                    Confirm Password
                  </label>
                </div>
                <div className="absolute inset-y-0 top-[32px] right-2 flex items-center pl-3">
                  {showConfirmPassword ? (
                    <Image
                      src="/icons/hide_eye.png"
                      height={20}
                      width={20}
                      alt="lock"
                      onClick={() =>
                        setShowConfirmPassword(!showConfirmPassword)
                      }
                      className=" cursor-pointer"
                    />
                  ) : (
                    <Image
                      src="/icons/eye.png"
                      height={20}
                      width={20}
                      alt="lock"
                      onClick={() =>
                        setShowConfirmPassword(!showConfirmPassword)
                      }
                      className=" cursor-pointer"
                    />
                  )}
                </div>
                <input
                  required
                  disabled={user_data.password === ""}
                  className={`bg-gray-200 text-gray-700 focus:border-transparent focus:ring-0 border border-gray-300 rounded py-2 px-4 block w-full appearance-none ${
                    user_data.password === "" && "cursor-not-allowed"
                  } ${password_match === "no_match" && "border-red"} ${
                    password_match === "match" && "border-green"
                  }`}
                  value={user_data.confirm_password}
                  type={!showConfirmPassword ? "password" : "text"}
                  name="confirm_password"
                  onChange={handleInputChange}
                  onKeyUp={passwordChecker}
                />
              </div>
              {password_match === "no_match" && (
                <p className="text-red text-[11px] my-1">
                  Please confirm your password
                </p>
              )}
              {password_match === "match" && (
                <p className="text-green text-[11px] my-1">
                  Password confirmation successful
                </p>
              )}
              {/* Submit button */}
              <div className="mt-8">
                <button
                  type="submit"
                  disabled={isLoading || password_match === "no_match"}
                  className={`bg-gray-700 text-white py-2 px-4 w-full rounded ${
                    isLoading ||
                    (password_match === "no_match" && "cursor-not-allowed")
                  } ${password_match === "match" && "cursor-pointer"}`}
                >
                  {isLoading ? (
                    <div className="flex items-center justify-center gap-2">
                      <BeatLoader size={10} color="#fff" />
                      <span className="text-[15px] font-secondary">
                        {buttonStatus && buttonStatus}
                      </span>
                    </div>
                  ) : (
                    <span>Submit</span>
                  )}
                </button>
              </div>
            </form>

            {/* lOGIN REDIRECT */}

            <div className="mt-4 flex items-center justify-between">
              <p className="border-b w-1/5 md:w-1/4"></p>
              <Link href="/login" className="text-xs text-gray-500 uppercase">
                or log in
              </Link>
              <p className="border-b w-1/5 md:w-1/4"></p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Register;
